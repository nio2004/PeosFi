{
  "language": "Solidity",
  "sources": {
    "src/ZeroFiP2PLending.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {RayMath} from \"./RayMath.sol\";\nimport {Ray} from \"./Types.sol\";\nimport {LoanStatus} from \"./Commons.sol\";\n\ncontract ZeroFiP2PLending {\n    using RayMath for Ray;\n    using RayMath for uint256;\n\n    event LoanRequested(uint256 id, DesiredLoanTerms terms);\n    event LoanInitiated(uint256 id, Loan loan);\n\n    struct DesiredLoanTerms {\n        address borrower;\n        uint256 amount;\n        Ray interestRate;\n        uint256 duration;\n    }\n\n    struct Loan {\n        address borrower;\n        address lender;\n        uint256 amount;\n        Ray interestRate;\n        uint256 limitDate;\n        uint256 repayDate; // 0 value means not repaid\n        uint256 initiationDate;\n    }\n\n    IERC20 public immutable asset;\n\n    constructor(IERC20 _asset) {\n        asset = _asset;\n    }\n\n    mapping(uint256 => DesiredLoanTerms) public desiredLoans;\n    mapping(uint256 => Loan) public loan;\n    uint256 public nbOfDesiredLoans;\n    uint256 public nbOfLoans;\n\n    function requestLoan(uint256 amount, Ray interestRate, uint256 duration) external returns(uint256 id){\n        id = ++nbOfDesiredLoans;\n        desiredLoans[id] = DesiredLoanTerms({\n            borrower: msg.sender,\n            amount: amount,\n            interestRate: interestRate,\n            duration: duration\n        });\n\n        emit LoanRequested(id, desiredLoans[nbOfDesiredLoans]);\n    }\n\n    function lend(uint256 desiredLoanId) external returns(uint256 loanId) {\n        DesiredLoanTerms memory desiredLoan = desiredLoans[desiredLoanId];\n        loanId = ++nbOfLoans;\n        loan[loanId] = Loan({\n            borrower: desiredLoan.borrower,\n            lender: msg.sender,\n            amount: desiredLoan.amount,\n            interestRate: desiredLoan.interestRate,\n            limitDate: block.timestamp + desiredLoan.duration,\n            repayDate: 0,\n            initiationDate: block.timestamp\n        });\n        asset.transferFrom(msg.sender, desiredLoan.borrower, desiredLoan.amount);\n         \n        emit LoanInitiated(loanId, loan[loanId]);\n    }\n\n    function repay(uint256 loanId) external {\n        Loan memory loanRepaid = loan[loanId];\n\n        uint256 amountToRepay = loanRepaid.amount + loanRepaid.amount.mul(\n            loanRepaid.interestRate.mul(block.timestamp - loanRepaid.initiationDate));\n        asset.transferFrom(msg.sender, loanRepaid.lender, amountToRepay);\n        loan[loanId].repayDate = block.timestamp;\n    }\n\n    function getLoanStatus(uint256 loanId) public view returns(LoanStatus) {\n        Loan memory loanToCheck = loan[loanId];\n        if (loanToCheck.repayDate == 0) {\n            if (block.timestamp > loanToCheck.limitDate) {\n                return LoanStatus.Defaulted;\n            } else {\n                return LoanStatus.Ongoing;\n            }\n        } else {\n            return LoanStatus.Repaid;\n        }\n    }\n}"
    },
    "../node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "src/RayMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {RAY, Ray} from \"./Types.sol\";\n\n/// @notice Manipulates fixed-point unsigned decimals numbers\n/// @dev all uints are considered integers (no wad)\nlibrary RayMath {\n    // ~~~ calculus ~~~ //\n\n    /// @notice `a` plus `b`\n    /// @return result\n    function add(Ray a, Ray b) internal pure returns (Ray) {\n        return Ray.wrap(Ray.unwrap(a) + Ray.unwrap(b));\n    }\n\n    /// @notice `a` minus `b`\n    /// @return result\n    function sub(Ray a, Ray b) internal pure returns (Ray) {\n        return Ray.wrap(Ray.unwrap(a) - Ray.unwrap(b));\n    }\n\n    /// @notice `a` times `b`\n    /// @return result\n    function mul(Ray a, Ray b) internal pure returns (Ray) {\n        return Ray.wrap((Ray.unwrap(a) * Ray.unwrap(b)) / RAY);\n    }\n\n    /// @notice `a` times `b`\n    /// @return result\n    function mul(Ray a, uint256 b) internal pure returns (Ray) {\n        return Ray.wrap(Ray.unwrap(a) * b);\n    }\n\n    /// @notice `a` times `b`\n    /// @return result\n    function mul(uint256 a, Ray b) internal pure returns (uint256) {\n        return (a * Ray.unwrap(b)) / RAY;\n    }\n\n    /// @notice `a` divided by `b`\n    /// @return result\n    function div(Ray a, Ray b) internal pure returns (Ray) {\n        return Ray.wrap((Ray.unwrap(a) * RAY) / Ray.unwrap(b));\n    }\n\n    /// @notice `a` divided by `b`\n    /// @return result\n    function div(Ray a, uint256 b) internal pure returns (Ray) {\n        return Ray.wrap(Ray.unwrap(a) / b);\n    }\n\n    /// @notice `a` divided by `b`\n    /// @return result\n    function div(uint256 a, Ray b) internal pure returns (uint256) {\n        return (a * RAY) / Ray.unwrap(b);\n    }\n\n    /// @notice `a` divided by `b`\n    /// @return result\n    function div(uint256 a, uint256 b) internal pure returns (Ray) {\n        return Ray.wrap((a * RAY) / b);\n    }\n\n    // ~~~ comparisons ~~~ //\n\n    /// @notice is `a` less than `b`\n    /// @return result\n    function lt(Ray a, Ray b) internal pure returns (bool) {\n        return Ray.unwrap(a) < Ray.unwrap(b);\n    }\n\n    /// @notice is `a` greater than `b`\n    /// @return result\n    function gt(Ray a, Ray b) internal pure returns (bool) {\n        return Ray.unwrap(a) > Ray.unwrap(b);\n    }\n\n    /// @notice is `a` greater or equal to `b`\n    /// @return result\n    function gte(Ray a, Ray b) internal pure returns (bool) {\n        return Ray.unwrap(a) >= Ray.unwrap(b);\n    }\n\n    /// @notice is `a` equal to `b`\n    /// @return result\n    function eq(Ray a, Ray b) internal pure returns (bool) {\n        return Ray.unwrap(a) == Ray.unwrap(b);\n    }\n\n    // ~~~ uint256 method ~~~ //\n\n    /// @notice highest value among `a` and `b`\n    /// @return maximum\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n}\n"
    },
    "src/Types.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\ntype Ray is uint256;\nuint256 constant RAY = 1e27;\nRay constant ONE = Ray.wrap(RAY);                                                                                                                                                         bool constant a = true;\n"
    },
    "src/Commons.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {Ray} from \"./Types.sol\";\n\nenum LoanStatus {\n    Ongoing,\n    Repaid,\n    Defaulted\n}\n\nstruct LoanTerms {\n    address borrower;\n    uint256 amount;\n    Ray interestRate;\n    uint256 limitRepayDate;\n}\n\nstruct Loan {\n    LoanTerms terms;\n    uint256 initiationDate;\n    uint256 repayDate; // 0 value means not repaid\n}"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=../node_modules/@openzeppelin/",
      "forge-std/=../node_modules/forge-std/src/",
      "ds-test/=../node_modules/ds-test/src/"
    ],
    "optimizer": { "enabled": true, "runs": 200 },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "": ["ast"],
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ]
      }
    },
    "evmVersion": "paris",
    "libraries": {}
  }
}
